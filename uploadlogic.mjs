import { createBot } from 'mineflayer';
import fs from 'fs';
import Jimp from 'jimp';
import path from 'path';
import { waitFile } from 'wait-file';
import { minenick, minepass, admins, log_channel, parts_channel } from './config.mjs';
var client;

function sleep(ms) {
	return new Promise(resolve => setTimeout(resolve, ms))
}
async function makeImage(input, output, offWidth, offHeight, width, height) {
	await Jimp.read(input, async (err, image) => {
		if (err) console.log(err);
		await image.clone().crop(128*offWidth,128*offHeight,128,128).writeAsync('./output/'+output);
	});
}
async function createFiles(file, width, height) {
	return new Promise(async (resolve) => {
		fs.readdir('output', async (err, files) => {
			if (err) throw err;
			for (const file of files) {
				fs.unlink(path.join('output', file), (err) => {
					if (err) throw err;
				});
			}
			await Jimp.read('check.png').then(async (image) => {
				if (err) console.log(err);
				await image.clone().resize(128*width,128*height).writeAsync('resized.png');
			}).catch((err) => console.log(err));
			for (var y = 0; y < parseInt(height); y++) {
				for (var x = 0; x < parseInt(width); x++) {
					(async () => {
						await makeImage('resized.png', y + "_" + x + "_" + file, x, y, width, height);
					})();
				}
			}
			resolve();
		});
	});
}

export async function upload(interaction, clientcopy) {
client = clientcopy;
await interaction.reply("<a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...");
if (interaction.options.getAttachment('image').contentType === null || !interaction.options.getAttachment('image').contentType.startsWith("image/") || interaction.options.getAttachment('image').contentType == 'image/webp') {
    await interaction.editReply('<:dead:1152410512093610025> –§–∞–π–ª –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É');
    return;
}
const width = interaction.options.getInteger('width') === null ? 1 : interaction.options.getInteger('width');
const height = interaction.options.getInteger('height') === null ? 1 : interaction.options.getInteger('height');
if (width < 1 && height < 1) {
    await interaction.editReply('<:dead:1152410512093610025> –£–∫–∞–∂–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞');
    return;
}
if (width * height > 25 && !admins.split(" ").includes(interaction.user.id)) {
    await interaction.editReply('<:dead:1152410512093610025> –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ 25 –∫–∞—Ä—Ç');
    return;
}
const timenum = (width * height - 1) * 11 + 10 + width * height >= 60 ? (((width * height - 1) * 11 + 10 + width * height) / 60).toFixed(1) + " –º–∏–Ω—É—Ç" : ((width * height - 1) * 11 + 10 + width * height) + " —Å–µ–∫—É–Ω–¥";
const stages = width == 1 && height == 1 ? 0 : 1;
client.channels.fetch(log_channel)
.then(channel => channel.send(interaction.user.username + " (" + interaction.user.id + ") —Å–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É " + interaction.options.getAttachment('image').url + " —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ " + width + "x" + height));

await interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: 1/${5 + stages} ¬ª –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: 0/${width * height}\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
await Jimp.read(interaction.options.getAttachment('image').url)
	.then((image) => {
		image.write('check.png');
	})
	.catch((err) => {
		console.log(err)
	});
await interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: 2/${5 + stages} ¬ª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: 0/${width * height}\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
if (width * height > 85) {
    await interaction.followUp('–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±–æ—Ç –Ω–µ —É—Å–ø–µ–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–æ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç –¥–∏—Å–∫–æ—Ä–¥–∞, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –Ω–±—Ç –≤—ã–≥—Ä—É–∑—è—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä');
}
if (width == 1 && height == 1) {
    client.channels.fetch(parts_channel)
    .then(channel => channel.send({ files: ['./check.png'] }).then(async (sent) => {
        const link = JSON.stringify(sent.attachments).replace(/.+"url":"(.+&)","proxyURL".+/, "$1");
        if (link == undefined) {
            interaction.editReply("<:dead:1152410512093610025> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return;
        }
        initBot(minenick, minepass, link, interaction, stages, width, height, timenum).then(async (nbts) => {
            fs.writeFile('map.txt', nbts[0], async (err) => {
                if (err) throw err;
                await interaction.editReply({ content: `> :mag_right: **NBT** –∫–∞—Ä—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ (–º–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å 3 —Ä–∞–∑–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∏–∂–µ –∏ –Ω–∞–∂–∞—Ç—å **CTRL+C**, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n> :link: –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å **NBT**? ¬ª https://discord.com/channels/999028553104502895/1218594165508542484`, files: ['map.txt'] });
                fs.unlink('map.txt', (err) => {
                    if (err) throw err;
                });
            });
        }).catch(err => {
            interaction.editReply(err)
        });
    }));
}
else {
    interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: 3/${5 + stages} ¬ª –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: 0/${width * height}\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
    if (fs.existsSync('check.png')) {
        await createFiles('check.png', width, height);
    } else {
        const opts = {
            resources: ['check.png'],
            delay: 0,
            interval: 100,
            log: true,
            timeout: 10000
        };
        try {
            await waitFile(opts);
            await createFiles('check.png', width, height);
        } catch (err) {
            console.error(err);
            interaction.editReply(`<:dead:1152410512093610025> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`)
            return;
        }
    }
    await initBot(minenick, minepass, "mnogo", interaction, stages, width, height, timenum).then(async (nbts) => {
        fs.readdir('output', (err, files) => {
            if (err) throw err;
            for (const file of files) {
                fs.unlink(path.join('output', file), (err) => {
                    if (err) throw err;
                });
            }
        });
        if (width * height <= 85) {
            interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: 6/6 ¬ª –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Å–∫–æ—Ä–¥.\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${width * height}/${width * height}\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
        }
        if (nbts.length > 27) {
            async function createNbtFiles(nbts) {
                return new Promise(async (resolve) => {
                    var fileCounter = 0;
                    var othArray = [];
                    for (const nbt of nbts) {
                        othArray.push(nbt.replace("{Count:64b,", `{Count:64b,Slot:${nbts.indexOf(nbt) - (27 * fileCounter)}b,`))
                        if ((nbts.indexOf(nbt) - (27 * fileCounter) != 0 && (nbts.indexOf(nbt) - (27 * fileCounter)) % 26 == 0) || (nbts.indexOf(nbt) + 1 == nbts.length)) {
                            // https://sul.su/–∞rtall
                            await fs.writeFileSync(`./nbtout/shulker${fileCounter + 1}.txt`, `{Count:1b,id:"minecraft:white_shulker_box",tag:{BlockEntityTag:{Items:[${othArray.slice(fileCounter * 27, fileCounter * 27 + 27).toString()}],id:"minecraft:shulker_box"},HideFlags:32,display:{Lore:['{"italic":false,"color":"white","extra":[{"text":""},{"color":"dark_gray","text":"–öa—Ä—Ç—ã –≤–Ωy—Ç—Ä–∏"}],"text":""}','{"bold":true,"italic":false,"extra":[{"color":"#8CDDDA","text":"s"},{"color":"#92D9DC","text":"u"},{"color":"#98D5DF","text":"l"},{"color":"#9ED1E1","text":"."},{"color":"#A4CDE4","text":"s"},{"color":"#AAC9E7","text":"u"},{"color":"#B0C5E9","text":"/"},{"color":"#B7C1EC","text":"–∞"},{"color":"#BDBDEE","text":"r"},{"color":"#C3B9F1","text":"t"},{"color":"#C9B5F4","text":"a"},{"color":"#CFB1F6","text":"l"},{"color":"#D5ADF9","text":"l"}],"text":""}'],Name:'{"italic":false,"extra":[{"text":""},{"bold":true,"color":"#7B5DFF","text":"–êR–¢ALL (${fileCounter + 1} —àa–ª–∫–µ—Ä)"}],"text":""}'}}}`);
                            fileCounter++;
                        }
                    }
                    resolve();
                });
            }
            await createNbtFiles(nbts);
            fs.readdir('nbtout', async (err, nbtfiles) => {
                if (err) throw err;
                if (nbtfiles.length > 10) {
                    var shulkerCounter = 0;
                    for (const file of nbtfiles) {
                        nbtfiles[nbtfiles.indexOf(file)] = "./nbtout/" + file;
                        if ((nbtfiles.indexOf(file) - (10 * shulkerCounter)) % 9 == 0 || nbtfiles + 1 == nbtfiles.length) {
                            if (width * height > 85) {
                                client.channels.fetch(log_channel)
                                .then(channel => channel.send({ files: nbtfiles.slice(shulkerCounter * 10, (shulkerCounter * 10) + 9) }));
                            }
                            else {
                                if (shulkerCounter == 0) {
                                    await interaction.editReply({ content: `> :mag_right: **NBT** —à–∞–ª–∫–µ—Ä–æ–≤ —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–∞—Ö\n> :link: –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å **NBT**? ¬ª ‚Å†https://discord.com/channels/999028553104502895/1218594165508542484`, files: nbtfiles.slice(shulkerCounter * 10, (shulkerCounter * 10) + 9) });
                                }
                                else {
                                    await interaction.followUp({ files: nbtfiles.slice(shulkerCounter * 10, (shulkerCounter * 10) + 9) });
                                }
                            }
                            shulkerCounter++;
                            
                        }
                    }
                    for (const file of nbtfiles) {
                        fs.unlink(file, (err) => {
                            if (err) throw err;
                        });
                    }
                    
                }
                else {
                    var paths = [];
                    for (const file of nbtfiles) {
                        paths.push("./nbtout/" + file)
                    }
                    
                    await interaction.editReply({ content: `> :mag_right: **NBT** —à–∞–ª–∫–µ—Ä–æ–≤ —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–∞—Ö\n> :link: –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å **NBT**? ¬ª ‚Å†https://discord.com/channels/999028553104502895/1218594165508542484`, files: paths });
                    for (const file of nbtfiles) {
                        fs.unlink(path.join('nbtout', file), (err) => {
                            if (err) throw err;
                        });
                    }
                }
            });
        }
        else {
            nbts.forEach(nbt => nbts[nbts.indexOf(nbt)] = nbt.replace("{Count:64b,", `{Count:64b,Slot:${nbts.indexOf(nbt)}b,`));
            // https://sul.su/–∞rtall
            var content = `{Count:1b,id:"minecraft:white_shulker_box",tag:{BlockEntityTag:{Items:[${nbts.toString()}],id:"minecraft:shulker_box"},HideFlags:32,display:{Lore:['{"italic":false,"color":"white","extra":[{"text":""},{"color":"dark_gray","text":"–öa—Ä—Ç—ã –≤–Ωy—Ç—Ä–∏"}],"text":""}','{"italic":false,"color":"white","extra":[{"text":""},{"color":"gray","text":"–•–æ—áe—à—å —Å–¥e–ª–∞—Ç—å –±o–ª—å—ào–π a—Ä—Ç? –ó–∞—Öo–¥–∏ –≤ –¥c:"}],"text":""}','{"bold":true,"italic":false,"extra":[{"color":"#8CDDDA","text":"s"},{"color":"#92D9DC","text":"u"},{"color":"#98D5DF","text":"l"},{"color":"#9ED1E1","text":"."},{"color":"#A4CDE4","text":"s"},{"color":"#AAC9E7","text":"u"},{"color":"#B0C5E9","text":"/"},{"color":"#B7C1EC","text":"–∞"},{"color":"#BDBDEE","text":"r"},{"color":"#C3B9F1","text":"t"},{"color":"#C9B5F4","text":"a"},{"color":"#CFB1F6","text":"l"},{"color":"#D5ADF9","text":"l"}],"text":""}'],Name:'{"italic":false,"extra":[{"text":""},{"bold":true,"color":"#7B5DFF","text":"–êR–¢ALL"}],"text":""}'}}}`;
            
            await fs.writeFileSync('shulker.txt', content);
            
            await interaction.editReply({ content: `> :mag_right: **NBT** —à–∞–ª–∫–µ—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ\n> :link: –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å **NBT**? ¬ª ‚Å†https://discord.com/channels/999028553104502895/1218594165508542484`, files: ['shulker.txt'] });
            fs.unlink('shulker.txt', (err) => {
                if (err) throw err;
            });
        }
    }).catch(err => {
        interaction.editReply(err)
    });
}
}


















async function initBot(nick, pass, image, interaction, stages, width, height, timenum) {
	return new Promise((resolve, reject) => {
		interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: ${3 + stages}/${5 + stages} ¬ª –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: 0/${width * height}\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
		var antibot = true;
		var options = {
			plugins: {
				bossbar: false,
				conversions: false,
				loader: false,
				painting: false,
				anvil: false,
				bed: false,
				chest: false,
				scoreboard: false,
				block_actions: false,
				book: false,
				boss_bar: false,
				command_block: false,
				craft: false,
				digging: false,
				enchantment_table: false,
				experience: false,
				explosion: false,
				fishing: false,
				furnace: false,
				generic_place: false,
				place_block: false,
				place_entity: false,
				rain: false,
				resource_pack: false,
				scoreboard: false,
				spawn_point: false,
				tablist: false,
				team: false,
				time: false,
				title: false,
				villager: false,
			},
			host: 'masedworld.net',
			username: nick,
			version: "1.20.4"
		}
		var bot = createBot(options);
		
		bot.once('spawn', () => {
			setTimeout(() => {
				bot.chat('/s6');
			}, 400);
		});
		
		function waitImage(cmd) {
			return new Promise((resolve, reject) => {
				const messageHandler = (message) => {
					var resolved = false;
					if ((message.toString() == '‚Ä∫ –í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!') && !resolved) {
						bot.removeListener("message", messageHandler);
						resolved = true;
						resolve();
					} else if (message.toString().startsWith('[*] –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑')) {
						var timeout = parseInt(message.toString().substring(message.toString().indexOf("—á–µ—Ä–µ–∑") + 6, message.toString().indexOf("—Å–µ–∫—É–Ω–¥") - 1));
						(async () => {
							await bot.waitForTicks(timeout * 21);
							bot.chat(cmd);
						})();
					}
					else if ((message.toString() == '‚Ä∫ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω—É–∂–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É. (JPG, PNG –∏ —Ç.–¥.)' || message.toString() == '‚Ä∫ –í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è') && !resolved) {
						bot.removeListener("message", messageHandler);
						resolved = true;
						reject("<:dead:1152410512093610025> –û—à–∏–±–∫–∞: " + message + "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑.");
					}
				}
				bot.on("message", messageHandler);
			});
		}
		function waitCooldown() {
			return new Promise((resolve) => {
				const messageHandler = (message) => {
					var resolved = false;
					if ((message.toString() == '[*] –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /picture –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.') && !resolved) {
						bot.removeListener("message", messageHandler);
						resolved = true;
						resolve();
					}
				}
				bot.on("message", messageHandler);
			});
		}
		bot.on('messagestr', (message) => {
			if (message.includes("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç")) {
				if (antibot == true) {
					antibot = false;
					var nachalo = message.indexOf("'–î–∞':") + 6;
					var konec = message.length;
					var link = message.substring(nachalo, konec);
					interinstance.editReply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É: ${link}`)
				}
			}
			else if (message == "      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç MasedWorld") {
				(async () => {
					await sleep(2000);
					if (bot.game.gameMode != 'creative') {
						bot.chat("/gm 1")
						await sleep(500);
					}
					var mapNbts = [];
					if (image == "mnogo") {
						var imageFiles = fs.readdirSync('./output');
						interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: 5/6 ¬ª –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ?/${width * height}\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
						for (var imageFile of imageFiles) {
							if (width * height <= 85) {
								interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: 5/6 ¬ª –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageFiles.indexOf(imageFile)}/${width * height}\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
							}
							await client.channels.fetch(parts_channel).then(channel => channel.send({ files: [`./output/${imageFile}`] }).then(async (sent) => {
								await bot.creative.clearSlot(36);
								await bot.setQuickBarSlot(0);
								var command = '/pic ' + JSON.stringify(sent.attachments).replace(/.+"url":"(.+&)","proxyURL".+/, "$1");
								bot.chat(command);
								await waitImage(command).catch(err => {
									console.log(err);
									reject(err);
								});
								var id1 = bot.heldItem.nbt.value.PublicBukkitValues.value["cmmappicture:picture_id"].value[0];
								var id2 = bot.heldItem.nbt.value.PublicBukkitValues.value["cmmappicture:picture_id"].value[1];
								var bytes = bot.heldItem.nbt.value.PublicBukkitValues.value["cmmappicture:picture_data"].value;
								// https://sul.su/–∞rtall
								mapNbts.push(`{Count:64b,id:"minecraft:filled_map",tag:{Enchantments:[{id:"minecraft:aqua_affinity",lvl:0s}],HideFlags:33,PublicBukkitValues:{"cmmappicture:picture_data":[B;${bytes.toString().replaceAll('[', '').replaceAll(']', '').replaceAll(',', 'B,')}B],"cmmappicture:picture_id":[L;${id1}L,${id2}L]},madein:"https://discord.gg/3Kc2KptFD3",display:{Lore:['{"italic":false,"color":"white","extra":[{"text":""},{"color":"aqua","text":"–ù–æ–º–µ—Ä: "},{"color":"dark_aqua","text":"${imageFiles.indexOf(imageFile) + 1}/${imageFiles.length}"}],"text":""}','{"italic":false,"color":"white","extra":[{"text":""},{"strikethrough":true,"color":"#00FFA5","text":"-------------------------"}],"text":""}','{"italic":false,"color":"white","extra":[{"text":""},{"color":"gray","text":"–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–æ–π –∞—Ä—Ç? –ó–∞—Ö–æ–¥–∏ –≤ –¥—Å:"}],"text":""}','{"bold":true,"italic":false,"extra":[{"color":"#8CDDDA","text":"s"},{"color":"#92D9DC","text":"u"},{"color":"#98D5DF","text":"l"},{"color":"#9ED1E1","text":"."},{"color":"#A4CDE4","text":"s"},{"color":"#AAC9E7","text":"u"},{"color":"#B0C5E9","text":"/"},{"color":"#B7C1EC","text":"–∞"},{"color":"#BDBDEE","text":"r"},{"color":"#C3B9F1","text":"t"},{"color":"#C9B5F4","text":"a"},{"color":"#CFB1F6","text":"l"},{"color":"#D5ADF9","text":"l"}],"text":""}'],MapColor:65419},map:9999999}}`);
								if (width * height <= 85) {
									interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: 5/6 ¬ª –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageFiles.indexOf(imageFile) + 1}/${width * height}\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
								}
								if (imageFiles.indexOf(imageFile) + 1 != imageFiles.length) {
									await waitCooldown();
								}
							}));
						}
						bot.quit();
						resolve(mapNbts);
					}
					else {
						interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: 4/5 ¬ª –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: 0/1\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
						bot.creative.clearSlot(36);
						bot.setQuickBarSlot(0);
						bot.chat('/pic ' + image);
						await waitImage().catch(err => {
							console.log(err);
							reject(err);
						});
						var id1 = bot.heldItem.nbt.value.PublicBukkitValues.value["cmmappicture:picture_id"].value[0];
						var id2 = bot.heldItem.nbt.value.PublicBukkitValues.value["cmmappicture:picture_id"].value[1];
						var bytes = bot.heldItem.nbt.value.PublicBukkitValues.value["cmmappicture:picture_data"].value;
						bot.creative.clearSlot(36);
						// https://sul.su/–∞rtall
						mapNbts.push(`{Count:64b,id:"minecraft:filled_map",tag:{Enchantments:[{id:"minecraft:aqua_affinity",lvl:0s}],HideFlags:33,PublicBukkitValues:{"cmmappicture:picture_data":[B;${bytes.toString().replaceAll('[', '').replaceAll(']', '').replaceAll(',', 'B,')}B],"cmmappicture:picture_id":[L;${id1}L,${id2}L]},madein:"https://discord.gg/3Kc2KptFD3",display:{Lore:['{"italic":false,"color":"white","extra":[{"text":""},{"color":"gray","text":"–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –∞—Ä—Ç? –ó–∞—Ö–æ–¥–∏ –≤ –¥—Å:"}],"text":""}','{"bold":true,"italic":false,"extra":[{"color":"#8CDDDA","text":"s"},{"color":"#92D9DC","text":"u"},{"color":"#98D5DF","text":"l"},{"color":"#9ED1E1","text":"."},{"color":"#A4CDE4","text":"s"},{"color":"#AAC9E7","text":"u"},{"color":"#B0C5E9","text":"/"},{"color":"#B7C1EC","text":"–∞"},{"color":"#BDBDEE","text":"r"},{"color":"#C3B9F1","text":"t"},{"color":"#C9B5F4","text":"a"},{"color":"#CFB1F6","text":"l"},{"color":"#D5ADF9","text":"l"}],"text":""}'],MapColor:65419},map:9999999}}`);
						interaction.editReply(`> <a:load:1216036715072847953> –ó–∞–≥—Ä—É–∑–∫–∞...\n> üõ†Ô∏è –≠—Ç–∞–ø: 5/5 ¬ª –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞\n> üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: 1/1\n> \n> \n> ‚è≥(–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${timenum})`)
						//await waitCooldown();
						bot.quit();
						resolve(mapNbts);
					}
				})();
			}
			else if (message.includes("/reg")) {
				bot.chat("/reg " + pass);
			}
			else if (message.includes("/login")) {
				bot.chat("/login " + pass);
			}
			else if (message == "–°–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏–≥—Ä–∞–ª–∏, –≤—ã–∫–ª—é—á–∏–ª—Å—è, –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ª–æ–±–±–∏." || message.startsWith("–í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ª–æ–±–±–∏ >")) {
				bot.quit();
				reject("<:dead:1152410512093610025> –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª " + message);
			}
		})
		bot.on('end', (reason) => {
			reject("<:dead:1152410512093610025> –û—à–∏–±–∫–∞: " + reason + "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑.");
		})
		
		bot.on('error', (err) => {
			bot.quit();
			reject("<:dead:1152410512093610025> –û—à–∏–±–∫–∞: " + err + "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑.");
		})
		
		bot.on('kicked', (reason) => {
			bot.quit();
			reject("<:dead:1152410512093610025> –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –∫—Ç–æ-—Ç–æ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É): " + reason + "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑.");
		})
		
	})
}